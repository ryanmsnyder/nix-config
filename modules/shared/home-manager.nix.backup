{ config, pkgs, lib, ... }:

let name = "Ryan Snyder";
    user = "ryansnyder";
    email = "ryansnyder4@gmail.com"; in
{
  # Shared shell configuration
  zsh = {
    enable = true;
    autocd = false;
    plugins = [
      {
        # will source zsh-autosuggestions.plugin.zsh
        name = "zsh-autosuggestions";
        src = pkgs.fetchFromGitHub {
          owner = "zsh-users";
          repo = "zsh-autosuggestions";
          rev = "v0.4.0";
          sha256 = "0z6i9wjjklb4lvr7zjhbphibsyx51psv50gm07mbb0kj9058j6kc";
        };
      }
    ];

    syntaxHighlighting = {
      enable = true;
    };

    shellAliases = {
      # lsd
      ls = "lsd";
      l = "ls -l";
      la = "ls -a";
      lla = "ls -la";
      lt = "ls --tree";

      # bat
      cat = "bat";

      # git
      gst = "git status";
      ga = "git add";
      gl = "git log";
      glo = "git log --graph --decorate --oneline";
      gc = "git commit";
      gp = "git push";
      gd = "git diff";
      gunstage = "git reset HEAD --"; # undo git add .
      grestore = "git reset --hard HEAD"; # reset staging area and working directory back to HEAD

      # lf (file manager)
      # lf = "lfcd";
    };

    initExtraFirst = ''
      if [[ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]]; then
        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        . /nix/var/nix/profiles/default/etc/profile.d/nix.sh
      fi

      # Define variables for directories
      export PATH=$HOME/.pnpm-packages/bin:$HOME/.pnpm-packages:$PATH
      export PATH=$HOME/.npm-packages/bin:$HOME/bin:$PATH
      export PATH=$HOME/.local/share/bin:$PATH

      # Remove history data we don't want to see
      export HISTIGNORE="pwd:ls:cd"

      # nix shortcuts
      shell() {
          nix-shell '<nixpkgs>' -A "$1"
      }

      # Use difftastic, syntax-aware diffing
      alias diff=difft

      # Always color ls and group directories
      alias ls='ls --color=auto'
    '';
  };

  git = {
    enable = true;
    ignores = [ "*.swp" ];
    userName = name;
    userEmail = email;
    lfs = {
      enable = true;
    };
    extraConfig = {
      init.defaultBranch = "main";
      core = { 
	    editor = "vim";
        autocrlf = "input";
      };
      pull.rebase = true;
      rebase.autoStash = true;
    };
  };

  ssh = {
    enable = true;

    extraConfig = lib.mkMerge [
      ''
        Host github.com
          Hostname github.com
          IdentitiesOnly yes
      ''
      (lib.mkIf pkgs.stdenv.hostPlatform.isLinux
        ''
          IdentityFile /home/${user}/.ssh/id_github
        '')
      (lib.mkIf pkgs.stdenv.hostPlatform.isDarwin
        ''
          IdentityFile /Users/${user}/.ssh/id_github
        '')
    ];
  };

  # better cd tool
  zoxide = {
    enable = true;
  };

  # terminal file manager
  lf = {
    enable = true;
    settings = {
      # interpreter for shell commands
      shell = "sh";

      # set '-eu' options for shell commands
      # These options are used to have safer shell commands. Option '-e' is used to
      # exit on error and option '-u' is used to give error for unset variables.
      # Option '-f' disables pathname expansion which can be useful when $f, $fs, and
      # $fx variables contain names with '*' or '?' characters. However, this option
      # is used selectively within individual commands as it can be limiting at
      # times.
      shellopts = "-eu";

      # set internal field separator (IFS) to "\n" for shell commands
      # This is useful to automatically split file names in $fs and $fx properly
      # since default file separator used in these variables (i.e. 'filesep' option)
      # is newline. You need to consider the values of these options and create your
      # commands accordingly.
      ifs = "\\n";

      # enable hidden files
      hidden = true;

      # enable icons
      icons = true;

      # leave some space at the top and the bottom of the screen
      scrolloff = 10;

      # Use the `dim` attribute instead of underline for the cursor in the preview pane
      cursorpreviewfmt = "\\033[7;2m";
    };


    commands = {
      # &{{}} syntax is for async/background commands
      # ${{}} syntax is for synchronous commands

      # define a custom 'open' command
      # This command is called when current file is not a directory. You may want to
      # use either file extensions and/or mime types here. Below uses an editor for
      # text files and a file opener for the rest.
      open = ''&{{
        case $(file --mime-type -Lb $f) in
          text/*) lf -remote "send $id \$$EDITOR \$fx";;
          *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
        esac
        }}
        '';
      
      # define a custom 'delete' command
      delete = ''''${{
        set -f
        # printf '"$fx"\n'
        printf 'Move "$fx" to trash? [y/n]: '
        read ans
        [ "$ans" = "y" ] && rm -rf "$fx"
      }}
      '';

      # extract the current file with the right command
      # (xkcd link: https://xkcd.com/1168/)
      extract =  ''''${{
          set -f
          case $f in
              *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
              *.tar.gz|*.tgz) tar xzvf $f;;
              *.tar.xz|*.txz) tar xJvf $f;;
              *.zip) unzip $f;;
              *.rar) unrar x $f;;
              *.7z) 7z x $f;;
          esac
      }}
      '';

      # execute python script that moves the item to the trash so that it can be restored
      trash = ''''${{
        "$HOME/.config/lf/move_to_trash/venv/bin/python" "$HOME/.config/lf/move_to_trash/trash.py" $fx
        echo "Moved \033[31m$fx\033[0m to trash.\n"
      }}
      '';

      restore_trash = ''''${{
        printf "Enter each file/directory you'd like to restore separated by a space (only provide file name + extension). Use quotes if the file/directory name contains spaces:\n\033[32m❯\033[0m "
        read -r input
        trash_dir=~/.Trash
        ans=()
        
        # Use eval to split the input into words
        # This will correctly handle words in quotes
        eval "files=( $input )"
        
        for file in "''${files[@]}"; do
          ans+=("''${trash_dir}/''${file}")
        done
        
        # putback "''${ans[@]}" &> /dev/null
        "$HOME/.config/lf/move_to_trash/venv/bin/python" "$HOME/.config/lf/move_to_trash/putback.py" "''${ans[@]}" 
        echo "The following files/directories have been restored:\n\033[32m''${ans[@]}\033[0m\n"
      }}
      '';

      # compress current file or selected files with tar and gunzip
      tar = ''''${{
        set -f
        mkdir $1
        cp -r $fx $1
        tar czf $1.tar.gz $1
        rm -rf $1
        }}
      '';

      # compress current file or selected files with zip
      zip = ''''${{
        set -f
        mkdir $1
        cp -r $fx $1
        zip -r $1.zip $1
        rm -rf $1
      }}
      '';

      preview = ''''${{
        qlmanage -p $fx > /dev/null
      }}
      '';
    };
      
    keybindings = {
      # mkdir command. See wiki if you want it to select created dir
      a = ":push %mkdir<space>";

            # Basic Functions
      "." = "set hidden!";
      dd = "trash";
      dr = "restore_trash";
      p = "paste";
      y = "copy";
      x = "cut";
      "<enter>" = "open";
      R = "reload";
      mf = "mkfile";
      md = "mkdir";
      C = "clear";

      # select current item
      "<c-x>" = "toggle";

      # preview file in MacOS qlmanage (QuickLook)
      "<space>" = "preview > /dev/null";

      # set semicolon to enter command mode
      ";" = "push :";

      # use enter for shell commands
      # "<enter>" = "shell";

      # show the result of execution of previous commands
      "`" = "!true";

      # shortcuts to commonly used directories
      c = "cd ~/code";
      gD = "cd ~/documents";
      gd = "cd ~/downloads";
      gc = "cd ~/.config";
      gt = "cd ~/Library/CloudStorage/Box-Box/Rakuten USA - Treasury";

      # dedicated keys for file opener actions
      o = "&mimeopen $f";
      O = "$mimeopen --ask $f";

      # set bat as pager
      i = "$bat $f --pager='less -R'";
    };
  };

  # zsh prompt
  starship = {
    enable = true;
    # Configuration written to ~/.config/starship.toml
    settings = {
      # Sets user-defined palette
      palette = "catppuccin_macchiato";

      add_newline = true;

      character = {
        success_symbol = "[➜](green)";
        error_symbol = "[❯](red)";
        vicmd_symbol = "[❮](green)";
      };

      directory = {
          truncation_length = 5;
          style = "bold sapphire";
      };

      git_commit = {
        commit_hash_length = 8;
        style = "bold white";
      };

      git_state = {
        format = "[\\($state( $progress_current of $progress_total)\\)]($style) ";
      };

      git_status = {
        conflicted = "⚔️ ";
        ahead = "🏎️💨×$count ";
        behind = "🐢×$count ";
        diverged = "🔱 🏎️💨×$ahead_count 🐢×$behind_count ";
        untracked = "🛤️×$count ";
        stashed = "📦 ";
        modified = "📝×$count ";
        staged = "🗃️×$count ";
        renamed = "📛×$count ";
        deleted = "🗑️×$count ";
        style = "bright-white";
        format = "$all_status$ahead_behind";
      };

      cmd_duration = {
        min_time = 10000; # Show command duration over 10,000 milliseconds (=10 sec)
        format = " took [$duration]($style)";
      };

      package = {
        disabled = true;
      };

      python = {
        format = "[$symbol$version]($style)";
        style = "bold yellow";
      };

      nodejs = {};

      hostname = {
        ssh_only = true;
        format = "on [$hostname](bold red) ";
        style = "bold dimmed white";
        disabled = false;
      };

      palettes = {
        catppuccin_macchiato = {
          rosewater = "#f4dbd6";
          flamingo = "#f0c6c6";
          pink = "#f5bde6";
          mauve = "#c6a0f6";
          red = "#ed8796";
          maroon = "#ee99a0";
          peach = "#f5a97f";
          yellow = "#eed49f";
          green = "#a6da95";
          teal = "#8bd5ca";
          sky = "#91d7e3";
          sapphire = "#7dc4e4";
          blue = "#8aadf4";
          lavender = "#b7bdf8";
          text = "#cad3f5";
          subtext1 = "#b8c0e0";
          subtext0 = "#a5adcb";
          overlay2 = "#939ab7";
          overlay1 = "#8087a2";
          overlay0 = "#6e738d";
          surface2 = "#5b6078";
          surface1 = "#494d64";
          surface0 = "#363a4f";
          base = "#24273a";
          mantle = "#1e2030";
          crust = "#181926";
        };
      };

    };
  };
}
